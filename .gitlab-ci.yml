image: node:16-buster

.cache: &global_cache
  cache:
    key: "v2-$CI_PROJECT_ID-$CI_JOB_NAME"
    untracked: true
    paths:
      - .npm/
      - node_modules/
      - app/node_modules/

stages:
  - lint
  - test
  - prebuild
  - build
  - pre-deploy
  - deploy

lint:
  stage: lint
  <<: *global_cache
  script:
    - npm ci --cache .npm && npm run app:ci
    - npm run "app:lint:$TARGET"
  parallel:
    matrix:
      - TARGET:
          - tsc
          - eslint
          - prettier

audit:
  stage: lint
  <<: *global_cache
  script:
    - npm ci --cache .npm  && npm run app:ci
    - npm audit --audit-level=high
    - cd app
    - npm audit --audit-level=high
  allow_failure: false

test:
  stage: test
  <<: *global_cache
  script:
    - npm ci --cache .npm
    - npm run app:ci
    - npm run test
    - npm run test:junit
  artifacts:
    expire_in: 48 hours
    when: always
    reports:
      cobertura: coverage/cobertura-coverage.xml
      junit: test-results.xml

prebuild-web:
  stage: prebuild
  <<: *global_cache
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - export threema_web_version=threema-web-2.3.17
    - npm ci --cache .npm
    - ./tools/patches/patch-threema-web.sh
    - node tools/patches/pre-patch-threema-web.js
    - npm run app:build:web
    - ./tools/patches/post-patch-threema-web.sh
  artifacts:
    expire_in: 48 hours
    name: prebuilt-threema-web
    paths:
      - app/dependencies/threema-web/

build-linux:
  image: $CI_REGISTRY/operations/dockerfiles/node-buster-wine-mono:16
  stage: build
  <<: *global_cache
  before_script:
    - apt-get update -y
    - apt-get install -y fakeroot
    - apt-get install -y rpm
    - export threema_web_version=threema-web-2.3.17
    - if [ "$CI_COMMIT_REF_PROTECTED" != "true" ]; then export DEV_ENV=development; fi
  script:
    - npm ci --cache .npm
    - npm run app:ci
    - node tools/patches/post-patch-threema-web.js linux-deb $FLAVOUR
    - if [ "$FLAVOUR" == "red" ]; then ./tools/patches/red-patch-threema-web.sh; fi
    - npm run electron:dist:linux:$INSTALLER:$FLAVOUR
    - npm run electron:package:linux:$INSTALLER:$FLAVOUR
  parallel:
    matrix:
      - INSTALLER: [deb, rpm]
        FLAVOUR: [consumer, work, red]
  needs: [prebuild-web]
  artifacts:
    expire_in: 48 hours
    name: linux-installer
    paths:
      - app/build/dist-electron/installers/*.amd64.rpm
      - app/build/dist-electron/installers/*.deb

build-windows:
  image: $CI_REGISTRY/operations/dockerfiles/node-buster-wine-mono:16
  stage: build
  <<: *global_cache
  before_script:
    # Install certs
    # - echo $ms_authenticode_cert | base64 -d > msauthenticode.p12
    - pwd
    - echo $authenticode_pvk | base64 -d > authenticode.pvk
    - echo $authenticode_spc | base64 -d > authenticode.spc
    - rm -rf app/build/dist-electron/packaged
    - rm -rf app/build/dist-electron/installers
    - mono --version
    - export threema_web_version=threema-web-2.3.17
    - if [ "$CI_COMMIT_REF_PROTECTED" != "true" ]; then export DEV_ENV=development; fi
  script:
    - pwd
    - npm ci --cache .npm
    - npm run app:ci
    - node tools/patches/post-patch-threema-web.js windows $FLAVOUR
    - if [ "$FLAVOUR" == "red" ]; then ./tools/patches/red-patch-threema-web.sh; fi
    - npm run electron:dist:windows:$FLAVOUR
    - npm run electron:package:windows:installer:$FLAVOUR
    - if [ "$CI_COMMIT_REF_PROTECTED" == "true" ]; then ./tools/signing/sign-windows-install.sh "$FLAVOUR"; fi
  parallel:
    matrix:
      - FLAVOUR: [consumer, work, red]
  retry:
    max: 2
  # The timeout is chosen this low because builds sometimes just time out.
  # The are then automatically retried two times (see above).
  timeout: 45m
  needs: [prebuild-web]
  artifacts:
    expire_in: 48 hours
    name: windows-installer
    paths:
      - app/build/dist-electron/installers/*-setup.exe
      - app/build/dist-electron/installers/*-full.nupkg
      - app/build/dist-electron/installers/RELEASES

build-macOS:
  stage: build
  <<: *global_cache
  tags:
    - macOS-electron
    - no-parallel
  before_script:
    - if [ "$CI_COMMIT_REF_PROTECTED" != "true" ]; then export DEV_ENV=development; fi
    - export threema_web_version=threema-web-2.3.17
  script:
    - npm ci --cache .npm
    - npm run app:ci
    - node tools/patches/post-patch-threema-web.js macOS $FLAVOUR
    - if [ "$FLAVOUR" == "red" ]; then ./tools/patches/red-patch-threema-web.sh; fi
    - ./tools/signing/unlock-keychain.sh
    - npm run electron:dist:macos:$FLAVOUR
    - ./tools/signing/lock-keychain.sh
    - npm run electron:package:macos:dmg:$FLAVOUR
    - npm run electron:package:macos:zip:$FLAVOUR
  parallel:
    matrix:
      - FLAVOUR: [consumer, work, red]
  needs: [prebuild-web]
  artifacts:
    expire_in: 48 hours
    name: macos-installer
    paths:
      - app/build/dist-electron/installers/*.dmg
      - app/build/dist-electron/installers/*.zip

generate-updates:
  stage: pre-deploy
  image: $CI_REGISTRY/operations/dockerfiles/node-buster-wine-mono:16
  dependencies:
    - build-macOS
    - build-windows
  script:
    - echo "$CI_JOB_NAME"
    - npm ci --cache .npm
    - npm run generateUpdates:macos
    - npm run generateUpdates:windows
  artifacts:
    expire_in: 96 hours
    name: updates
    paths:
      - app/build/dist-electron/updates/*
      - app/build/dist-electron/version.txt
  needs: [build-macOS, build-windows]
  only:
    variables:
      - "$CI_COMMIT_TAG =~ /release-.*/"
      - '$CI_COMMIT_BRANCH == "main"'

generate-download:
  stage: pre-deploy
  image: $CI_REGISTRY/operations/dockerfiles/node-buster-wine-mono:16
  dependencies:
    - build-macOS
    - build-windows
    - build-linux
  script:
    - echo "$CI_JOB_NAME"
    - npm ci --cache .npm
    - mkdir app/build/dist-electron/downloads
    - ls app/build/dist-electron/
    - ls app/build/dist-electron/installers
    - npm run generateDownloads:$os
  parallel:
    matrix:
      - os: [macos, windows, linux-deb, linux-rpm]
  artifacts:
    expire_in: 96 hours
    name: downloads
    paths:
      - app/build/dist-electron/downloads/*
      - app/build/dist-electron/version.txt
  needs: [build-macOS, build-windows, build-linux]
  only:
    variables:
      - "$CI_COMMIT_TAG =~ /release-.*/"
      - '$CI_COMMIT_BRANCH == "main"'

deploy-release:
  stage: deploy
  when: manual
  image: alpine:3.10
  script:
    # Setup
    - apk add curl
    - cd app/build/dist-electron/downloads
    - for FILENAME in *; do echo "Processing $FILENAME"; curl -T $FILENAME "ftp://${FTP_HOST}${FTP_PATH}" --user "$FTP_USER:$FTP_PASS" --ftp-create-dirs; done
    - versionPrefix=`cat ../version.txt`
    - for FILENAME in *; do echo "Processing $FILENAME"; curl -T $FILENAME "ftp://${FTP_HOST}/archive/${versionPrefix}/" --user "$FTP_USER:$FTP_PASS" --ftp-create-dirs; done
  needs: [generate-download]
  only:
    variables:
      - "$CI_COMMIT_TAG =~ /release-.*/"
  variables:
    FTP_PATH: /v1/release/
    # Set FTP_HOST, FTP_USER and FTP_PASS secret variable!

deploy-updates:
  stage: deploy
  when: manual
  image: alpine:3.10
  script:
    # Setup
    - apk add curl
    - cd app/build/dist-electron/updates
    - for FILENAME in *; do echo "Processing $FILENAME"; curl -T $FILENAME "ftp://${FTP_HOST}${FTP_PATH}" --user "$FTP_USER:$FTP_PASS" --ftp-create-dirs; done
    - versionPrefix=`cat ../version.txt`
    - for FILENAME in *; do echo "Processing $FILENAME"; curl -T $FILENAME "ftp://${FTP_HOST}/archive/${versionPrefix}/" --user "$FTP_USER:$FTP_PASS" --ftp-create-dirs; done
  needs: [generate-updates]
  only:
    variables:
      - "$CI_COMMIT_TAG =~ /release-.*/"
  variables:
    FTP_PATH: /v1/updates/
    # Set FTP_HOST, FTP_USER and FTP_PASS secret variable!
